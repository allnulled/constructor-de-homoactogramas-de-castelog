creo ConstructorDeHomactogramasDeCastelog como un componente vue2 con nombre "ConstructorDeHomactogramasDeCastelog" con plantilla {
  <div class="ConstructorDeHomactogramasDeCastelog Component win7">
    <div class="editor_box">
      <div v-if="exito_de_compilacion">
        <span>✔ La compilación fue exitosa.</span>
        <details>
          <summary>Mostrar código</summary>
          <div>
            <textarea class="w_100" style="min-height: 300px;" disabled="true" :value="codigo_actual_js"></textarea>
          </div>
        </details>
      </div>
      <div v-if="exito_de_ejecucion">
        <span>✔ La ejecución fue exitosa.</span>
        <pre>{{ JSON.stringify(exito_de_ejecucion, null, 2) }}</pre>
      </div>
      <div v-if="error">
        <span>✘ Error: {{ error.message }}</span>
      </div>
      <div style="position: relative;">
        <textarea style="font-family: monospace; font-size: 9px; resize: vertical; min-height: 900px;" class="w_100" v-model="codigo_actual"></textarea>
        <div style="position: absolute; top: 5px; right: 5px; left: auto; bottom: auto;">
          <button style="opacity: 0.8;" v-on:click="() => compilar(true)">Compilar</button>
          <button style="opacity: 0.8;" v-on:click="() => aplicar()">Aplicar</button>
        </div>
      </div>
    </div>
  </div>
} con lógica {
  retorno {
    método data donde {
      retorno {
        codigo_actual_js: "",
        codigo_actual: un código en texto donde {
Hago pantalla.pintarse.cada(200).
Desde 0 hasta 10 {
  Hago asíncronamente persona.rotar.codo.izquierdo(40,1000).
}.
}.trim(),
        exito_de_ejecucion: undefined,
        exito_de_compilacion: undefined,
        error: undefined
      }.
    }.
    propiedad methods como {
      mostrar_exito_de_ejecucion: una función con (resultado) donde {
        asigno this.error como undefined.
        asigno this.exito_de_compilacion como undefined.
        asigno this.exito_de_ejecucion como resultado.
        asigno this.exito_de_ejecucion_timeout_id como setTimeout(una lambda donde asigno this.exito_de_ejecucion como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      mostrar_exito_de_compilacion: una función con () donde {
        asigno this.error como undefined.
        asigno this.exito_de_ejecucion como undefined.
        asigno this.exito_de_compilacion como true.
        asigno this.exito_timeout_id como setTimeout(una lambda donde asigno this.exito_de_compilacion como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      mostrar_error: una función con (error) donde {
        imprimo error.
        asigno this.exito_de_ejecucion como undefined.
        asigno this.exito_de_compilacion como undefined.
        asigno this.error como error.
        asigno this.error_timeout_id como setTimeout(una lambda donde asigno this.error como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      compilar: una función con (mostrar_exito) donde {
        creo codigo_calo como this.codigo_actual.
        creo codigo_js como Castelog_parser.parse(codigo_calo).
        creo codigo_temporal como `(async function(persona, pantalla, fondo, juego, paloman_api, window, componente) { try { ${codigo_js} } catch(error) { this.mostrar_error(error); } })`.
        creo codigo_js_final como codigo_temporal.
        asigno this.codigo_actual_js como codigo_js_final.
        si mostrar_exito {
          hago this.mostrar_exito_de_compilacion().
        }.
        retorno codigo_js_final.
      } en errores hago this.mostrar_error(error),
      aplicar: una función asíncrona donde {
        creo codigo_js como this.compilar().
        creo funcion_js como this.$window.eval(codigo_js).
        desacoplo constantes { juego, persona, pantalla, fondo } a partir de this.$window.datos_del_juego.
        creo resultado como asíncronamente funcion_js.call(this, persona, pantalla, fondo, juego, this.$window.Paloman_API, this.$window.window, this).
        si resultado no es tipo indefinido {
          hago this.mostrar_exito_de_ejecucion(resultado).
        }.
      } en errores hago this.mostrar_error(error)
    }.
    método mounted donde {
      si this.$window.Paloman_API es tipo indefinido lanzo un nuevo Error("El Homactógrafo de Castelog requiere tener cargada la Paloman_API para funcionar").
      asigno this.$window.datos_del_juego como this.$window.Paloman_API.iniciar().
      hago setTimeout(una lambda donde hago this.$window.datos_del_juego.pantalla.pintarse(), 1000).
      creo scripts_de_ejemplo como [
        "./js/homactogramas/kit.js"
      ].
      desde 0 hasta scripts_de_ejemplo.length {
        creo script_url como scripts_de_ejemplo[index].
        creo script_tag como document.createElement("script").
        asigno script_tag.src como script_url.
        hago document.body.append(script_tag).
      }.
    } en errores hago this.mostrar_error(error).
  }.
}.